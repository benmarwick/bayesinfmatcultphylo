#----------------------------------------------------------------
# This is RevBayes code, not R, and needs to be run in the terminal

# This code file was downloaded and modified from:
# Parins-Fukuchi, Caroline (2017), Data from: Use of continuous
# traits can improve morphological phylogenetics, Dryad,
# Dataset, https://doi.org/10.5061/dryad.40b70

# The code is cited in this paper:
# Caroline Parins-Fukuchi, Use of Continuous Traits Can Improve Morphological
# Phylogenetics, Systematic Biology, Volume 67, Issue 2, March 2018,
# Pages 328â€“339, https://doi.org/10.1093/sysbio/syx072

## This is intended to be run on RevBayes v1.0.0
# v1.0.1 has changed several function names. see RevBayes documentation for more details.
# This procedure was developed with the gratuitous aid of RevBayes example documents
# authored by Nicolas Lartillot, Michael Landis, and April Wright.

# BM: I downloaded RevBayes onto my computer and put in in my Applications folder (OSX)
# BM: we have:
# - birth-death tree model
# - Relaxed Brownian motion Model
# - relaxed clock model

getwd() # confirm that we are in the project directory where are input/output files are

# create file names: ----------------------------------------------------------

output_file <- "output-004"

# run code to create file names for output
source("analysis/paper/scripts/004-996-RevBayes-filenames.Rev")

intree <- "analysis/data/derived_data/output-001/map_tree.nex"

# run code to set MCMC run lengths
source("analysis/paper/scripts/004-997-RevBayes-mcmc-settings.Rev")

# import the data into RevBayes, watch terminal for message indicating success
contData <- readContinuousCharacterData(fl)
# the most relevant official tutorial is probably

numTips = contData.ntaxa()
numNodes = numTips * 2 - 1
names = contData.names()
diversification ~ dnLognormal(1e-3,1) # aka 'birth rate' for new varients
turnover = 0 # we are going to parameterise the BD prior,
# 'The turnover rate is the rate at which one species is replaced by another
# species due to a birth plus death event.... the turnover rate represent the
# longevity of a species' details: https://revbayes.github.io/tutorials/divrate/simple.html
speciation := diversification + turnover
extinction := turnover
sampling_fraction <- 1

# instantiate a Birth-Death tree with the parameters set above
psi ~ dnBDP(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=1, samplingStrategy = "uniform", condition = "nTaxa", taxa=names)
mvi = 0 # we are going to set tree rearrangement and node height scaling moves

# create our node height and topological rearrangement MCMC moves. These help us to explore
# the parameter space in each MCMC step. Good notes on these here:
# http://www.peterbeerli.com/classes/images/5/5f/RB_CTMC_Tutorial_oct2015.pdf
moves[++mvi] = mvSubtreeScale(psi, weight=5.0) # change the ages of the internal nodes
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=10.0) # change the ages of the internal nodes
moves[++mvi] = mvNNI(psi, weight=5.0)  # nearest-neighbor interchange move
moves[++mvi] = mvFNPR(psi, weight=5.0) # a fixed-node height subtree-prune and regrafting move

logSigma ~ dnNormal(0,1) # place a prior on BM sigma parameter.
sigma := 10^logSigma
moves[++mvi] = mvSlide(logSigma, delta=1.0, tune=true, weight=2.0)

# For our MCMC analysis, we need to set up a vector of monitors to record
# the states of our Markov chain.

monitors[1] = mnScreen(printgen=200, sigma)
monitors[2] = mnFile(filename=outlf, printgen=100, separator = TAB, sigma)
monitors[3] = mnFile(filename=outtr, printgen=50,  separator = TAB, psi)
monitors[4] = mnStochasticVariable(filename = pp_out + "/" + "pps_posterior.var",printgen=10)

##------------------------------------------
# from https://revbayes.github.io/tutorials/cont_traits/relaxed_bm.html

trait <- 1
tree <- readTrees(intree)[1]

contData.excludeAll()
contData.includeCharacter( trait )

nbranches <- 2 * numTips - 2

sigma ~ dnLoguniform(1e-5, 1e-1)
moves[++mvi] =  mvScale(sigma, weight=1.0)

expected_number_of_shifts <- 5
rate_shift_probability    <- expected_number_of_shifts / nbranches

sd = 0.578
rate_shift_distribution = dnLognormal(0, sd)

for(i in nbranches:1) {

    # draw the rate multiplier from a mixture distribution
    branch_rate_multiplier[i] ~ dnReversibleJumpMixture(constantValue=1, rate_shift_distribution, p=Probability(1 - rate_shift_probability) )

    # compute the rate for the branch
    if ( tree.isRoot( tree.parent(i) ) ) {
       branch_rates[i] := sigma * branch_rate_multiplier[i]
    } else {
       branch_rates[i] := branch_rates[tree.parent(i)] * branch_rate_multiplier[i]
    }

    # keep track of whether the branch has a rate shift
    branch_rate_shift[i] := ifelse( branch_rate_multiplier[i] == 1, 0, 1 )

    # use reversible-jump to move between models with and without
    # shifts on the branch
    moves[++mvi] = mvRJSwitch(branch_rate_multiplier[i], weight=1)

    # include proposals on the rate mutliplier (when it is not 1)
    moves[++mvi] = mvScale(branch_rate_multiplier[i], weight=1)

}

num_rate_changes := sum( branch_rate_shift )

monitors[4] =  mnModel(outmd, printgen=10)
monitors[5] =  mnScreen(printgen=1000, sigma, num_rate_changes)
monitors[6] =  mnExtNewick(filename=outnt, isNodeParameter=TRUE, printgen=10, separator=TAB, tree=tree, branch_rates)

## -----------------------------------------

# specify that we are going calculate BM likelihood using the REML PIC algorithm (see Felsenstein 1973)
# several chapters on fitting BM models here: https://lukejharmon.github.io/pcm/chapters/
traits ~ dnPhyloBrownianREML(psi, branchRates=branch_rates^0.5, siteRates=sigma, nSites=contData.nchar())

# When this clamp function is called, RevBayes sets each of the stochastic
# nodes representing the tips of the tree to the corresponding
# nucleotide sequence in the alignment. This essentially
# tells the program that we have observed data for the sequences at the tips.
traits.clamp(contData) # match traits to tips

# we wrap the entire model to provide convenient access to the DAG.
# To do this, we only need to give the model() function a
# single node. With this node, the model() function can find all of the other
# nodes by following the arrows in the graphical model (see DOI:10.1093/sysbio/syw021
# for details of the typical graphical model)
bmv = model(sigma, logSigma, tree)     # link sigma param w/ BM model

# With a fully specified model, a set of monitors, and a set of moves,
# we can now set up the MCMC algorithm that will sample parameter values in
# proportion to their posterior probability. The mcmc() function will
# create our MCMC object:
chain = mcmc(bmv, monitors, moves)
chain.burnin(generations=chain_burnin, tuningInterval=tuning_interval)

chain.run(chain_run)
# To summarize the trees sampled from the posterior distribution,
# RevBayes can summarize the sampled trees by reading in the tree-trace file:
treetrace = readTreeTrace(file = outtr)
treefl <- outsm

# The mapTree() function will summarize the tree samples and write the
# maximum a posteriori tree to file, we can also summarise trees as MCC
# (maximum clade credibility) representation
map = mapTree( file=treefl, treetrace )
mccTree( file=outmc, treetrace )

# run code to get output for Bayes Factors
source("analysis/paper/scripts/004-998-RevBayes-compute-bf.Rev")



q() # quits RevBayes

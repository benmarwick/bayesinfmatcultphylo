q()
output_file <- "output-002"
fl <- "analysis/data/derived_data/data_for_revbayes.nex"  # continuous character set used for analysis in nexus format
fl
outtr <- "analysis/data/derived_data/" + output_file +  "/tree_trace.trees"  # file to write sampled trees
outlf <- "analysis/data/derived_data/" + output_file +  "/mcmc_log.txt"      # MCMC log
outsm <- "analysis/data/derived_data/" + output_file +  "/map_tree.nex"      # MAP summary tree file
outmc <- "analysis/data/derived_data/" + output_file +  "/mcc_tree.nex"      # MCC summary tree file
bm_basic_posterior_pp <- "analysis/data/derived_data/" + output_file +  "/BM_basic_posterior_pp.log"
BM_basic_powp <-         "analysis/data/derived_data/" + output_file +  "/BM_basic_powp.out"
pp_out <- "analysis/data/derived_data/" + output_file +  "/pp_out"
outssm <- "analysis/data/derived_data/" + output_file +  "/ssm.csv"
outpsm <- "analysis/data/derived_data/" + output_file +  "/psm.csv"
# import the data into RevBayes, watch terminal for message indicating success
contData <- readContinuousCharacterData(fl)
# the most relevant official tutorial is probably
# https://revbayes.github.io/tutorials/cont_traits/simple_bm.html
numTips = contData.ntaxa()
numNodes = numTips * 2 - 1
names = contData.names()
diversification ~ dnLognormal(0,1) # aka 'birth rate' for new varients
turnover = 0 # we are going to parameterise the BD prior,
# 'The turnover rate is the rate at which one species is replaced by another
# species due to a birth plus death event.... the turnover rate represent the
# longevity of a species' details: https://revbayes.github.io/tutorials/divrate/simple.html
speciation := diversification + turnover
extinction := turnover
sampling_fraction <- 1
# instantiate a Birth-Death tree with the parameters set above
psi ~ dnBDP(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=1, samplingStrategy = "uniform", condition = "nTaxa", taxa=names)
mvi = 0 # we are going to set tree rearrangement and node height scaling moves
# create our node height and topological rearrangement MCMC moves. These help us to explore
# the parameter space in each MCMC step. Good notes on these here:
# http://www.peterbeerli.com/classes/images/5/5f/RB_CTMC_Tutorial_oct2015.pdf
moves[++mvi] = mvSubtreeScale(psi, weight=5.0) # change the ages of the internal nodes
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=10.0) # change the ages of the internal nodes
moves[++mvi] = mvNNI(psi, weight=5.0)  # nearest-neighbor interchange move
moves[++mvi] = mvFNPR(psi, weight=5.0) # a fixed-node height subtree-prune and regrafting move
logSigma ~ dnNormal(0,1) # place a prior on BM sigma parameter.
sigma := 10^logSigma
moves[++mvi] = mvSlide(logSigma, delta=1.0, tune=true, weight=2.0)
monitors[1] = mnScreen(printgen=200, sigma)
monitors[2] = mnFile(filename=outlf, printgen=100, separator = TAB, sigma)
monitors[3] = mnFile(filename=outtr, printgen=50,  separator = TAB, psi)
monitors[4] = mnStochasticVariable(filename = pp_out + "/" + "pps_posterior.var",printgen=10)
# specify that we are going calculate BM likelihood using the REML PIC algorithm (see Felsenstein 1973)
# several chapters on fitting BM models here: https://lukejharmon.github.io/pcm/chapters/
traits ~ dnPhyloBrownianREML(psi, branchRates=1.0, siteRates=sigma, nSites=contData.nchar())
traits.clamp(contData) # match traits to tips
bmv = model(sigma)     # link sigma param w/ BM model
chain = mcmc(bmv, monitors, moves)
chain.burnin(generations=50, tuningInterval=5) # originally 50000 and 500
chain.run(500) # originally 500000
treetrace = readTreeTrace(file = outtr)
treefl <- outsm
map = mapTree( file=treefl, treetrace )
mccTree( file=outmc, treetrace )
### compute power posterior distributions
pow_p = powerPosterior(bmv, moves, monitors, BM_basic_powp, cats=50, sampleFreq=10)
pow_p.burnin(generations=500,tuningInterval=20). # originally 5000
pow_p.run(generations=100) # originally 1000
### use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file=BM_basic_powp, powerColumnName="power", likelihoodColumnName="likelihood")
write( ss.marginal(), filename =  outssm)
### use path sampling to calculate marginal likelihoods
ps = pathSampler(file=BM_basic_powp, powerColumnName="power", likelihoodColumnName="likelihood")
write( ps.marginal(), filename = outpsm )
)
#----------------------------------------------------------------
# This is RevBayes code, not R, and needs to be run in the terminal# This code file was downloaded and modified from:# Parins-Fukuchi, Caroline (2017), Data from: Use of continuous# traits can improve morphological phylogenetics, Dryad,# Dataset, https://doi.org/10.5061/dryad.40b70# The code is cited in this paper:# Caroline Parins-Fukuchi, Use of Continuous Traits Can Improve Morphological# Phylogenetics, Systematic Biology, Volume 67, Issue 2, March 2018,# Pages 328â€“339, https://doi.org/10.1093/sysbio/syx072## This is intended to be run on RevBayes v1.0.0# v1.0.1 has changed several function names. see RevBayes documentation for more details.# This procedure was developed with the gratuitous aid of RevBayes example documents# authored by Nicolas Lartillot, Michael Landis, and April Wright.# BM: I downloaded RevBayes onto my computer and put in in my Applications folder (OSX)# BM: we have:# - birth-death tree model# - Bro# - Bro# - Bro# - Bro# - Bro# - Bro# - Bro# - Bro# - Bro# - Bro#p= readTreeTrace(file = outtr)
treefl <- outsm
# The mapTree() function will summarize the tree samplesons=500,tu
q()
